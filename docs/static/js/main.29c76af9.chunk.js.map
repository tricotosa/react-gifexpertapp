{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/userFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","props","className","src","alt","GifGrid","loading","state","setstate","useEffect","then","imgs","useFetchGifs","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"mMAGaA,EAAc,SAAC,GAAyB,IAAtBC,EAAqB,EAArBA,cAE/B,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAiBI,OAEI,sBAAMC,SAbO,SAACC,GAClBA,EAAEC,iBAEEJ,EAAWK,OAAOC,OAAS,IAC3BR,GAAc,SAAAS,GAAI,OAAKP,GAAL,mBAAoBO,OACtCN,EAAc,MAQd,SACI,uBACIO,KAAK,OACLC,MAAOT,EACPU,SArBU,SAACP,GACvBF,EAAcE,EAAEQ,OAAOF,a,+BCRdG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DAEbC,EAFa,iDAEoCC,UAAWH,GAF/C,+DAGAI,MAAOF,GAHP,cAGbG,EAHa,gBAIIA,EAAKC,OAJT,uBAIXC,EAJW,EAIXA,KAEFC,EAAOD,EAAKE,KAAI,SAAAC,GAAQ,IAAD,EACzB,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAVvB,kBAcZM,GAdY,4CAAH,sDCEPO,EAAc,SAAEC,GAEzB,OACI,sBAAKC,UAAU,uCAAf,UACI,qBAAKC,IAAMF,EAAMd,IAAMiB,IAAMH,EAAMJ,QACnC,4BAAKI,EAAMJ,YCHVQ,EAAU,SAAC,GAAkB,IAAhBpB,EAAe,EAAfA,SAEtB,ECHwB,SAAEA,GAC1B,MAA0Bd,mBAAS,CAC/BqB,KAAM,GACNc,SAAS,IAFb,mBAAOC,EAAP,KAAcC,EAAd,KAiBA,OAZAC,qBAAW,WACPzB,EAASC,GACJyB,MAAM,SAAAC,GAEHH,EAAS,CACLhB,KAAMmB,EACNL,SAAS,SAItB,CAAErB,IAEEsB,EDfyBK,CAAc3B,GAAjCa,EAAb,EAAQN,KAAac,EAArB,EAAqBA,QAErB,OACI,qCACA,oBAAIJ,UAAU,kCAAd,SAAkDjB,IAEjDqB,GAAW,mBAAGJ,UAAU,mCAAb,qBAEZ,qBAAKA,UAAU,YAAf,SAGQJ,EAAOJ,KAAI,SAAAC,GAAG,OAEV,cAAC,EAAD,eAEQA,GADEA,EAAIC,aEhBrBiB,EAAe,WAExB,MAAoC1C,mBAAS,CAAC,OAA9C,mBAAO2C,EAAP,KAAmB5C,EAAnB,KAEA,OACI,qCACI,8CACA,cAAC,EAAD,CAAaA,cAAgBA,IAC7B,uBAEA,6BAEQ4C,EAAWpB,KAAK,SAAAT,GAAQ,OACpB,cAAC,EAAD,CAEAA,SAAWA,GADLA,Y,MCb9B8B,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.29c76af9.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nexport const AddCategory = ( { setCategories } ) => {\r\n\r\nconst [inputValue, setInputValue] = useState('');\r\n\r\nconst handleInputChange = (e) => {\r\n    setInputValue(e.target.value);\r\n}\r\n\r\nconst handleSubmit = (e) => {\r\n    e.preventDefault();\r\n\r\n    if( inputValue.trim().length > 2){\r\n        setCategories(cats => [inputValue, ...cats]);\r\n        setInputValue('');\r\n    }\r\n\r\n\r\n}\r\n\r\n    return (\r\n\r\n        <form onSubmit={ handleSubmit }>\r\n            <input \r\n                type=\"text\" \r\n                value={inputValue}\r\n                onChange={ handleInputChange }\r\n            />\r\n        </form>\r\n    \r\n    )\r\n}\r\n\r\nAddCategory.propTypes = {\r\n    setCategories: PropTypes.func.isRequired\r\n}\r\n","export const getGifs = async( category ) => {\r\n\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI( category ) }&limit=10&api_key=juB8H7USAyl6s4LibSEWSQNoeFN5RHCL`;\r\n    const resp = await fetch( url );\r\n    const { data } = await resp.json();\r\n\r\n    const gifs = data.map(img => {\r\n        return {\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images?.downsized_medium.url\r\n        }\r\n    })\r\n    \r\n    return gifs;\r\n}","import React from 'react'\r\n\r\nexport const GifGridItem = ( props ) => {\r\n\r\n    return (\r\n        <div className=\"card animate__animated animate__tada\">\r\n            <img src={ props.url } alt={ props.title } />\r\n            <p>{ props.title }</p>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport { useFetchGifs } from '../hooks/userFetchGifs'\r\nimport { GifGridItem } from './GifGridItem';\r\n\r\nexport const GifGrid = ({ category }) => {\r\n\r\n    const { data:images, loading} = useFetchGifs( category );\r\n\r\n    return (\r\n        <>\r\n        <h3 className=\"animate__animated animate__tada\">{ category }</h3>\r\n\r\n        {loading && <p className=\"animate__animated animate__flash\">Loading</p>}\r\n\r\n        <div className=\"card-grid\">\r\n\r\n            { \r\n                images.map(img => (\r\n                \r\n                    <GifGridItem \r\n                        key={ img.id }\r\n                        {...img} />\r\n\r\n                )) \r\n            }\r\n     \r\n        </div>\r\n        </>\r\n    )\r\n}\r\n","import { useState, useEffect } from \"react\"\r\nimport { getGifs } from \"../helpers/getGifs\";\r\n\r\nexport const useFetchGifs = ( category ) => {\r\n    const [state, setstate] = useState({\r\n        data: [],\r\n        loading: true\r\n    });\r\n\r\n    useEffect( () => {\r\n        getGifs( category )\r\n            .then( imgs => {\r\n          \r\n                setstate({\r\n                    data: imgs,\r\n                    loading: false\r\n                });\r\n              \r\n            })\r\n    }, [ category ])\r\n\r\n    return state; // {data:[], loading: true};\r\n}","import React, { useState } from 'react'\r\nimport { AddCategory } from './components/AddCategory';\r\nimport { GifGrid } from './components/GifGrid';\r\n\r\nexport const GifExpertApp = () => {\r\n\r\n    const [categories, setCategories] = useState(['Up']);\r\n\r\n    return (\r\n        < >\r\n            <h2>GifExpertApp</h2>\r\n            <AddCategory setCategories={ setCategories } />\r\n            <hr />\r\n\r\n            <ol>\r\n                {\r\n                    categories.map( category => \r\n                        <GifGrid \r\n                        key={ category }\r\n                        category={ category } />\r\n                    )\r\n                }\r\n            </ol>\r\n        </ >\r\n    )\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { GifExpertApp } from './GifExpertApp';\nimport './index.css';\n\nReactDOM.render(\n  <GifExpertApp />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}